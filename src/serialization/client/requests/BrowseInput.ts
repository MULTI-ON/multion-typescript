/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../index";
import * as MultiOn from "../../../api/index";
import * as core from "../../../core";
import { Mode } from "../../types/Mode";

export const BrowseInput: core.serialization.Schema<serializers.BrowseInput.Raw, MultiOn.BrowseInput> =
    core.serialization.object({
        cmd: core.serialization.string(),
        url: core.serialization.string().optional(),
        local: core.serialization.boolean().optional(),
        sessionId: core.serialization.property("session_id", core.serialization.string().optional()),
        maxSteps: core.serialization.property("max_steps", core.serialization.number().optional()),
        includeScreenshot: core.serialization.property("include_screenshot", core.serialization.boolean().optional()),
        temperature: core.serialization.number().optional(),
        mode: Mode.optional(),
        useProxy: core.serialization.property("use_proxy", core.serialization.boolean().optional()),
    });

export declare namespace BrowseInput {
    interface Raw {
        cmd: string;
        url?: string | null;
        local?: boolean | null;
        session_id?: string | null;
        max_steps?: number | null;
        include_screenshot?: boolean | null;
        temperature?: number | null;
        mode?: Mode.Raw | null;
        use_proxy?: boolean | null;
    }
}
